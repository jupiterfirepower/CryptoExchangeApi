<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NamedPipeWrapper</name>
    </assembly>
    <members>
        <member name="T:NamedPipeWrapper.IO.PipeStreamWriter`1">
            <summary>
            Wraps a <see cref="T:System.IO.Pipes.PipeStream"/> object and writes to it.  Serializes .NET CLR objects specified by <typeparamref name="T"/>
            into binary form and sends them over the named pipe for a <see cref="T:NamedPipeWrapper.IO.PipeStreamWriter`1"/> to read and deserialize.
            </summary>
            <typeparam name="T">Reference type to serialize</typeparam>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamWriter`1.#ctor(System.IO.Pipes.PipeStream)">
            <summary>
            Constructs a new <c>PipeStreamWriter</c> object that writes to given <paramref name="stream"/>.
            </summary>
            <param name="stream">Pipe to write to</param>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamWriter`1.Serialize(`0)">
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="T"/> is not marked as serializable.</exception>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamWriter`1.WriteObject(`0)">
            <summary>
            Writes an object to the pipe.  This method blocks until all data is sent.
            </summary>
            <param name="obj">Object to write to the pipe</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="T"/> is not marked as serializable.</exception>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamWriter`1.WaitForPipeDrain">
            <summary>
                Waits for the other end of the pipe to read all sent bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
            <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
            <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
        </member>
        <member name="P:NamedPipeWrapper.IO.PipeStreamWriter`1.BaseStream">
            <summary>
            Gets the underlying <c>PipeStream</c> object.
            </summary>
        </member>
        <member name="T:NamedPipeWrapper.IO.PipeStreamReader`1">
            <summary>
            Wraps a <see cref="T:System.IO.Pipes.PipeStream"/> object and reads from it.  Deserializes binary data sent by a <see cref="T:NamedPipeWrapper.IO.PipeStreamWriter`1"/>
            into a .NET CLR object specified by <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Reference type to deserialize data to</typeparam>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamReader`1.#ctor(System.IO.Pipes.PipeStream)">
            <summary>
            Constructs a new <c>PipeStreamReader</c> object that reads data from the given <paramref name="stream"/>.
            </summary>
            <param name="stream">Pipe to read from</param>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamReader`1.ReadLength">
            <summary>
            Reads the length of the next message (in bytes) from the client.
            </summary>
            <returns>Number of bytes of data the client will be sending.</returns>
            <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
            <exception cref="T:System.IO.IOException">Any I/O error occurred.</exception>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamReader`1.ReadObject(System.Int32)">
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="T"/> is not marked as serializable.</exception>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamReader`1.ReadObject">
            <summary>
            Reads the next object from the pipe.  This method blocks until an object is sent
            or the pipe is disconnected.
            </summary>
            <returns>The next object read from the pipe, or <c>null</c> if the pipe disconnected.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="T"/> is not marked as serializable.</exception>
        </member>
        <member name="P:NamedPipeWrapper.IO.PipeStreamReader`1.BaseStream">
            <summary>
            Gets the underlying <c>PipeStream</c> object.
            </summary>
        </member>
        <member name="P:NamedPipeWrapper.IO.PipeStreamReader`1.IsConnected">
            <summary>
            Gets a value indicating whether the pipe is connected or not.
            </summary>
        </member>
        <member name="T:NamedPipeWrapper.PipeExceptionEventHandler">
            <summary>
            Handles exceptions thrown during a read or write operation on a named pipe.
            </summary>
            <param name="exception">Exception that was thrown</param>
        </member>
        <member name="T:NamedPipeWrapper.IO.PipeStreamWrapper`1">
            <summary>
            Wraps a <see cref="T:System.IO.Pipes.PipeStream"/> object to read and write .NET CLR objects.
            </summary>
            <typeparam name="TReadWrite">Reference type to read from and write to the pipe</typeparam>
        </member>
        <member name="T:NamedPipeWrapper.IO.PipeStreamWrapper`2">
            <summary>
            Wraps a <see cref="T:System.IO.Pipes.PipeStream"/> object to read and write .NET CLR objects.
            </summary>
            <typeparam name="TRead">Reference type to <b>read</b> from the pipe</typeparam>
            <typeparam name="TWrite">Reference type to <b>write</b> to the pipe</typeparam>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamWrapper`2.#ctor(System.IO.Pipes.PipeStream)">
            <summary>
            Constructs a new <c>PipeStreamWrapper</c> object that reads from and writes to the given <paramref name="stream"/>.
            </summary>
            <param name="stream">Stream to read from and write to</param>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamWrapper`2.ReadObject">
            <summary>
            Reads the next object from the pipe.  This method blocks until an object is sent
            or the pipe is disconnected.
            </summary>
            <returns>The next object read from the pipe, or <c>null</c> if the pipe disconnected.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="TRead"/> is not marked as serializable.</exception>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamWrapper`2.WriteObject(`1)">
            <summary>
            Writes an object to the pipe.  This method blocks until all data is sent.
            </summary>
            <param name="obj">Object to write to the pipe</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="TRead"/> is not marked as serializable.</exception>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamWrapper`2.WaitForPipeDrain">
            <summary>
                Waits for the other end of the pipe to read all sent bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
            <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
            <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamWrapper`2.Close">
            <summary>
                Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="P:NamedPipeWrapper.IO.PipeStreamWrapper`2.BaseStream">
            <summary>
            Gets the underlying <c>PipeStream</c> object.
            </summary>
        </member>
        <member name="P:NamedPipeWrapper.IO.PipeStreamWrapper`2.IsConnected">
            <summary>
                Gets a value indicating whether the <see cref="P:NamedPipeWrapper.IO.PipeStreamWrapper`2.BaseStream"/> object is connected or not.
            </summary>
            <returns>
                <c>true</c> if the <see cref="P:NamedPipeWrapper.IO.PipeStreamWrapper`2.BaseStream"/> object is connected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:NamedPipeWrapper.IO.PipeStreamWrapper`2.CanRead">
            <summary>
                Gets a value indicating whether the current stream supports read operations.
            </summary>
            <returns>
                <c>true</c> if the stream supports read operations; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:NamedPipeWrapper.IO.PipeStreamWrapper`2.CanWrite">
            <summary>
                Gets a value indicating whether the current stream supports write operations.
            </summary>
            <returns>
                <c>true</c> if the stream supports write operations; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NamedPipeWrapper.IO.PipeStreamWrapper`1.#ctor(System.IO.Pipes.PipeStream)">
            <summary>
            Constructs a new <c>PipeStreamWrapper</c> object that reads from and writes to the given <paramref name="stream"/>.
            </summary>
            <param name="stream">Stream to read from and write to</param>
        </member>
        <member name="T:NamedPipeWrapper.NamedPipeClient`1">
            <summary>
            Wraps a <see cref="T:System.IO.Pipes.NamedPipeClientStream"/>.
            </summary>
            <typeparam name="TReadWrite">Reference type to read from and write to the named pipe</typeparam>
        </member>
        <member name="T:NamedPipeWrapper.NamedPipeClient`2">
            <summary>
            Wraps a <see cref="T:System.IO.Pipes.NamedPipeClientStream"/>.
            </summary>
            <typeparam name="TRead">Reference type to read from the named pipe</typeparam>
            <typeparam name="TWrite">Reference type to write to the named pipe</typeparam>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeClient`2.#ctor(System.String)">
            <summary>
            Constructs a new <c>NamedPipeClient</c> to connect to the <see cref="!:NamedPipeServer&lt;TRead, TWrite&gt;"/> specified by <paramref name="pipeName"/>.
            </summary>
            <param name="pipeName">Name of the server's pipe</param>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeClient`2.Start">
            <summary>
            Connects to the named pipe server asynchronously.
            This method returns immediately, possibly before the connection has been established.
            </summary>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeClient`2.PushMessage(`1)">
            <summary>
                Sends a message to the server over a named pipe.
            </summary>
            <param name="message">Message to send to the server.</param>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeClient`2.Stop">
            <summary>
            Closes the named pipe.
            </summary>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeClient`2.ConnectionOnError(NamedPipeWrapper.NamedPipeConnection{`0,`1},System.Exception)">
            <summary>
                Invoked on the UI thread.
            </summary>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeClient`2.OnError(System.Exception)">
            <summary>
                Invoked on the UI thread.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:NamedPipeWrapper.NamedPipeClient`2.AutoReconnect">
            <summary>
            Gets or sets whether the client should attempt to reconnect when the pipe breaks
            due to an error or the other end terminating the connection.
            Default value is <c>true</c>.
            </summary>
        </member>
        <member name="E:NamedPipeWrapper.NamedPipeClient`2.ServerMessage">
            <summary>
            Invoked whenever a message is received from the server.
            </summary>
        </member>
        <member name="E:NamedPipeWrapper.NamedPipeClient`2.Disconnected">
            <summary>
            Invoked when the client disconnects from the server (e.g., the pipe is closed or broken).
            </summary>
        </member>
        <member name="E:NamedPipeWrapper.NamedPipeClient`2.Error">
            <summary>
            Invoked whenever an exception is thrown during a read or write operation on the named pipe.
            </summary>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeClient`1.#ctor(System.String)">
            <summary>
            Constructs a new <c>NamedPipeClient</c> to connect to the <see cref="!:NamedPipeNamedPipeServer&lt;TReadWrite&gt;"/> specified by <paramref name="pipeName"/>.
            </summary>
            <param name="pipeName">Name of the server's pipe</param>
        </member>
        <member name="T:NamedPipeWrapper.NamedPipeConnection`2">
            <summary>
            Represents a connection between a named pipe client and server.
            </summary>
            <typeparam name="TRead">Reference type to read from the named pipe</typeparam>
            <typeparam name="TWrite">Reference type to write to the named pipe</typeparam>
        </member>
        <member name="F:NamedPipeWrapper.NamedPipeConnection`2.Id">
            <summary>
            Gets the connection's unique identifier.
            </summary>
        </member>
        <member name="F:NamedPipeWrapper.NamedPipeConnection`2.Name">
            <summary>
            Gets the connection's name.
            </summary>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeConnection`2.Open">
            <summary>
            Begins reading from and writing to the named pipe on a background thread.
            This method returns immediately.
            </summary>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeConnection`2.PushMessage(`1)">
            <summary>
            Adds the specified <paramref name="message"/> to the write queue.
            The message will be written to the named pipe by the background thread
            at the next available opportunity.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeConnection`2.Close">
            <summary>
            Closes the named pipe connection and underlying <c>PipeStream</c>.
            </summary>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeConnection`2.CloseImpl">
            <summary>
                Invoked on the background thread.
            </summary>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeConnection`2.OnSucceeded">
            <summary>
                Invoked on the UI thread.
            </summary>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeConnection`2.OnError(System.Exception)">
            <summary>
                Invoked on the UI thread.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeConnection`2.ReadPipe">
            <summary>
                Invoked on the background thread.
            </summary>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="TRead"/> is not marked as serializable.</exception>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeConnection`2.WritePipe">
            <summary>
                Invoked on the background thread.
            </summary>
            <exception cref="T:System.Runtime.Serialization.SerializationException">An object in the graph of type parameter <typeparamref name="TWrite"/> is not marked as serializable.</exception>
        </member>
        <member name="P:NamedPipeWrapper.NamedPipeConnection`2.IsConnected">
            <summary>
            Gets a value indicating whether the pipe is connected or not.
            </summary>
        </member>
        <member name="E:NamedPipeWrapper.NamedPipeConnection`2.Disconnected">
            <summary>
            Invoked when the named pipe connection terminates.
            </summary>
        </member>
        <member name="E:NamedPipeWrapper.NamedPipeConnection`2.ReceiveMessage">
            <summary>
            Invoked whenever a message is received from the other end of the pipe.
            </summary>
        </member>
        <member name="E:NamedPipeWrapper.NamedPipeConnection`2.Error">
            <summary>
            Invoked when an exception is thrown during any read/write operation over the named pipe.
            </summary>
        </member>
        <member name="T:NamedPipeWrapper.ConnectionEventHandler`2">
            <summary>
            Handles new connections.
            </summary>
            <param name="connection">The newly established connection</param>
            <typeparam name="TRead">Reference type</typeparam>
            <typeparam name="TWrite">Reference type</typeparam>
        </member>
        <member name="T:NamedPipeWrapper.ConnectionMessageEventHandler`2">
            <summary>
            Handles messages received from a named pipe.
            </summary>
            <typeparam name="TRead">Reference type</typeparam>
            <typeparam name="TWrite">Reference type</typeparam>
            <param name="connection">Connection that received the message</param>
            <param name="message">Message sent by the other end of the pipe</param>
        </member>
        <member name="T:NamedPipeWrapper.ConnectionExceptionEventHandler`2">
            <summary>
            Handles exceptions thrown during read/write operations.
            </summary>
            <typeparam name="TRead">Reference type</typeparam>
            <typeparam name="TWrite">Reference type</typeparam>
            <param name="connection">Connection that threw the exception</param>
            <param name="exception">The exception that was thrown</param>
        </member>
        <member name="T:NamedPipeWrapper.NamedPipeServer`1">
            <summary>
            Wraps a <see cref="T:System.IO.Pipes.NamedPipeServerStream"/> and provides multiple simultaneous client connection handling.
            </summary>
            <typeparam name="TReadWrite">Reference type to read from and write to the named pipe</typeparam>
        </member>
        <member name="T:NamedPipeWrapper.Server`2">
            <summary>
            Wraps a <see cref="T:System.IO.Pipes.NamedPipeServerStream"/> and provides multiple simultaneous client connection handling.
            </summary>
            <typeparam name="TRead">Reference type to read from the named pipe</typeparam>
            <typeparam name="TWrite">Reference type to write to the named pipe</typeparam>
        </member>
        <member name="M:NamedPipeWrapper.Server`2.#ctor(System.String)">
            <summary>
            Constructs a new <c>NamedPipeServer</c> object that listens for client connections on the given <paramref name="pipeName"/>.
            </summary>
            <param name="pipeName">Name of the pipe to listen on</param>
        </member>
        <member name="M:NamedPipeWrapper.Server`2.Start">
            <summary>
            Begins listening for client connections in a separate background thread.
            This method returns immediately.
            </summary>
        </member>
        <member name="M:NamedPipeWrapper.Server`2.PushMessage(`1)">
            <summary>
            Sends a message to all connected clients asynchronously.
            This method returns immediately, possibly before the message has been sent to all clients.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NamedPipeWrapper.Server`2.Stop">
            <summary>
            Closes all open client connections and stops listening for new ones.
            </summary>
        </member>
        <member name="M:NamedPipeWrapper.Server`2.ConnectionOnError(NamedPipeWrapper.NamedPipeConnection{`0,`1},System.Exception)">
            <summary>
                Invoked on the UI thread.
            </summary>
        </member>
        <member name="M:NamedPipeWrapper.Server`2.OnError(System.Exception)">
            <summary>
                Invoked on the UI thread.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="E:NamedPipeWrapper.Server`2.ClientConnected">
            <summary>
            Invoked whenever a client connects to the server.
            </summary>
        </member>
        <member name="E:NamedPipeWrapper.Server`2.ClientDisconnected">
            <summary>
            Invoked whenever a client disconnects from the server.
            </summary>
        </member>
        <member name="E:NamedPipeWrapper.Server`2.ClientMessage">
            <summary>
            Invoked whenever a client sends a message to the server.
            </summary>
        </member>
        <member name="E:NamedPipeWrapper.Server`2.Error">
            <summary>
            Invoked whenever an exception is thrown during a read or write operation.
            </summary>
        </member>
        <member name="M:NamedPipeWrapper.NamedPipeServer`1.#ctor(System.String)">
            <summary>
            Constructs a new <c>NamedPipeServer</c> object that listens for client connections on the given <paramref name="pipeName"/>.
            </summary>
            <param name="pipeName">Name of the pipe to listen on</param>
        </member>
    </members>
</doc>
